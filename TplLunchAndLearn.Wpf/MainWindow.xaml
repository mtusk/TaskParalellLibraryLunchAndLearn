<Window x:Class="TplLunchAndLearn.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Don't Block The Hoff"
        Width="525"
        Height="350"
        Background="#FF404040"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Icon="Images/hoff.ico">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <Viewbox Grid.Row="1" Margin="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Image Grid.Column="1"
                       RenderTransformOrigin="0.5,0.5"
                       Source="Images/hoff.png">
                    <Image.RenderTransform>
                        <RotateTransform />
                    </Image.RenderTransform>
                    <Image.Triggers>
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:2"
                                                         From="0"
                                                         RepeatBehavior="Forever"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="359" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </Image.Triggers>
                </Image>

                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           FontFamily="Segoe Ui Light"
                           FontSize="36"
                           Foreground="White"
                           Text="Don't Block" />
                <TextBlock Grid.Column="2"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           FontFamily="Segoe Ui Light"
                           FontSize="36"
                           Foreground="White"
                           Text="The Hoff" />

                <!--  Message Dialog  -->
                <Grid Grid.Column="0"
                      Grid.ColumnSpan="2"
                      Height="120"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Top"
                      Cursor="Hand"
                      MouseDown="MessageDialog_MouseDown">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Message}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>

                    <Path Data="M272.025,6.50008 C274.345,6.49879 276.673,6.51379 279.007,6.54529 C428.386,8.56076 548.576,77.3458 547.458,160.181 C546.341,243.016 424.339,308.533 274.959,306.518 C223.61,305.825 175.71,297.243 135.001,282.912 L131.122,281.51 L25.3626,327.514 L73.1598,253.228 L71.1395,251.927 C30.402,225.067 6.0013,190.417 6.50773,152.882 C7.6079,71.3415 125.844,6.58148 272.025,6.50008 z"
                          Fill="Gray"
                          RenderTransformOrigin="0.5,0.5"
                          Stretch="Uniform">
                        <Path.RenderTransform>
                            <ScaleTransform ScaleX="-1" />
                        </Path.RenderTransform>
                    </Path>

                    <StackPanel VerticalAlignment="Center">
                        <TextBlock Margin="0,-10,0,0"
                                   FontFamily="Segoe Ui Light"
                                   FontSize="28"
                                   Foreground="White"
                                   Text="Result:"
                                   TextAlignment="Center"
                                   ToolTip="{Binding Exception.Message}" />
                        <TextBlock FontSize="20"
                                   Foreground="White"
                                   Text="{Binding Message}"
                                   TextAlignment="Center"
                                   TextTrimming="CharacterEllipsis"
                                   TextWrapping="NoWrap" />
                    </StackPanel>

                </Grid>

                <!--  Exception Dialog  -->
                <Grid Grid.Column="1"
                      Grid.ColumnSpan="2"
                      Height="90"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Top"
                      Cursor="Hand"
                      MouseDown="ExceptionDialog_MouseDown">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Exception}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>

                    <Path Data="M272.025,6.50008 C274.345,6.49879 276.673,6.51379 279.007,6.54529 C428.386,8.56076 548.576,77.3458 547.458,160.181 C546.341,243.016 424.339,308.533 274.959,306.518 C223.61,305.825 175.71,297.243 135.001,282.912 L131.122,281.51 L25.3626,327.514 L73.1598,253.228 L71.1395,251.927 C30.402,225.067 6.0013,190.417 6.50773,152.882 C7.6079,71.3415 125.844,6.58148 272.025,6.50008 z"
                          Fill="#FFE51400"
                          Stretch="Uniform" />

                    <TextBlock Margin="0,0,0,5"
                               VerticalAlignment="Center"
                               FontFamily="Segoe Ui SemiBold"
                               FontSize="24"
                               Foreground="White"
                               Text="Exception!"
                               TextAlignment="Center"
                               ToolTip="{Binding Exception.Message}" />
                </Grid>
            </Grid>
        </Viewbox>

        <Menu Grid.Row="0" Background="#FF666666">
            <MenuItem Header="Before TPL">
                <MenuItem Click="SynchronousBlockCodeMenuItem_Clicked"
                          Header="Synchronous Blocking Code"
                          ToolTip="Synchronous code that will block the UI." />
                <MenuItem Click="AsynchronousProgrammingModelMenuItem_Clicked"
                          Header="Asynchronous Programming Model"
                          ToolTip="Example of an API that uses the Asynchronous Programming Model (APM)." />
                <MenuItem Click="EventBasedAsynchronousPatternMenuItem_Clicked"
                          Header="Event-based Asynchronous Pattern"
                          ToolTip="Example of an API that uses the Event-based Asynchronous Pattern (EAP)." />
                <MenuItem Click="BackgroundWorkerMenuItem_Clicked"
                          Header="BackgroundWorker"
                          ToolTip="Example of using a BackgroundWorker." />
                <MenuItem Click="ThreadPoolMenuItem_Clicked"
                          Header="ThreadPool.QueueUserWorkItem"
                          ToolTip="Example of using ThreadPool.QueueUserWorkItem." />
            </MenuItem>
            <!--<MenuItem Header="Data Parallelism">
                <MenuItem Click="ParallelForEachMenuItem_Click"
                          Header="Parallel.ForEach"
                          ToolTip="Example of using Parallel.ForEach." />
            </MenuItem>-->
            <MenuItem Header="Task Parallelism">
                <MenuItem Click="TaskRunMenuItem_Click"
                          Header="Task.Run"
                          ToolTip="Example of using Task.Run to run code asynchronously." />
                <MenuItem Click="TaskWaitMenuItem_Click"
                          Header="Task.Wait"
                          ToolTip="Example of using Task.Wait to block the current thread." />
                <MenuItem Click="StronglyTypedInformationPassingMenuItem_Click"
                          Header="Strongly-typed information passing."
                          ToolTip="Example of passing information to task continuations." />
                <MenuItem Click="ContinueWhenAnyMenuItem_Click"
                          Header="ContinueWhenAny"
                          ToolTip="Example of using Task.ContinueWhenAny." />
                <MenuItem Click="ContinueWhenAllMenuItem_Click"
                          Header="ContinueWhenAll"
                          ToolTip="Example of using Task.ContinueWhenAll." />
            </MenuItem>
            <MenuItem Header="async/await">
                <MenuItem Click="AsyncAwaitMenuItem_Click"
                          Header="async/await"
                          ToolTip="Example of using asyn/await." />
                <MenuItem Click="AsyncAwaitTaskDelayMenuItem_Click"
                          Header="Task.Delay"
                          ToolTip="Example of using Task.Delay with the 'await' keyword to delay the current thread." />
            </MenuItem>
            <MenuItem Header="Exceptions">
                <MenuItem Click="UnhandledUnobservedExceptionMenuItem_Click"
                          Header="Unhandled Unobserved Exception"
                          ToolTip="A Task throws an exception that goes unobserved and unhandled." />
                <MenuItem Click="TaskTryCatchMenuItem_Click"
                          Header="try/catch in Tasks"
                          ToolTip="Using try/catch in Tasks." />
                <MenuItem Click="TaskExceptionCheckMenuItem_Click"
                          Header="Task.Exception check in continuation"
                          ToolTip="A Task executes a continuation that checks for errors." />
                <MenuItem Click="OnlyOnFaultedMenuItem_Click"
                          Header="TaskContinuationOptions.OnlyOnFaulted"
                          ToolTip="A Task executes a continuation only when the task has faulted by the thrown exception." />
                <!--<MenuItem Click="UnobservedTaskExceptionEventMenuItem_Click"
                          Header="TaskScheduler.UnobservedTaskException"
                          ToolTip="An attempt at demonstrating the UnobservedTaskExceptionEvent." />-->
                <MenuItem Click="AsyncAwaitExceptionsMenuItem_Click"
                          Header="Exceptions with async/await"
                          ToolTip="Example of async/await exception handling." />
                <MenuItem Click="TaskWaitTryCatchMenuItem_Click"
                          Header="Task.Wait with try/catch"
                          ToolTip="Using try/catch with Task.Wait" />
            </MenuItem>
        </Menu>
    </Grid>
</Window>
